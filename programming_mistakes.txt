Programming mistakes

Find past papers on Cate

It can be quite a bit faster to omit pseudocode when writing a program, but it may also be humongously slower (like the no repetition string program).
For the exam, it's very likely that there is time to do everything with pseudocode - so don't take risks!

Predict output, flow of control:
- do that handout sent to us by email which was full of tricks (unless WJK says it deffo won't be on exam)

General:
- if you've declared a function otf nameNumber eg doathing1(..), then you can't declare another function name eg doathing(..)
- use for loops even when while is appropriate, it's safer, you will avoid weird mistakes you don't even know exist (e.g. list->data segmentation fault cf below)
- idiotic. consider:
  void function1(const char* ch) {
    function2(ch));
  }
  
  void function2(char* ch) {                //this won't compile, because compile can't be sure that function1() won't try to change ch. the solution is to call...
  ...                                        //...function2 with char *chh = ch
  }                                        //it's as simple as that, and yet you were freaking out because you felt under pressure
- makefile: don't have "make" written inside it
- prog test: they always provide hints at the bottom of the paper. read them
- you will get "error: multiple definition of function" etc if you #include header file and definition file in main, so don't do it
- if you execute "./program", adding command line args "< input.txt" sets cin to 'input.txt', and "> output.txt" sets cout to 'output.txt'
- cerr is standard error stream, to console by default. useful if cout has been redirected to a file as above
- suppose stdin has been redirected to a file as with enigma.
  while (!cin.eof())
  will not work as you expect it to if your input file has spaces at the end, because cin ignores spaces (to make inputting from keyboard easy).
  so what you need to do is delete whitespace AFTER every cin>>. 
  even with that,
  while (!cin.fail())
  will not work as you expect it to. I think it's because cin doesn't fail when it meets the end of a file; it fails in the next extraction.
  so use eof() specifically, and remove whitespace after every extraction.
- gdb many windows with main arguments:
  M-x gdb
  will get prompted: "Run gdb (like this): gdb --anotate=3 enigmaa"
  change that to: "Run gdb (like this): gdb --anotate=3 --args enigmaa arg_list many-windows
- learn bash command to remember more bash history in case compile error list is very big, include this command in sheet
- don't ever #include more than the header file in a .cpp file. the header file contains declarations, that's all your cpp file will need to invoke 
  functions that are defined in other cpp files.
- if(0)          // false
- if(1)          // true
- if(2)          // true
- if(0 == false) // true
- if(0 == true)  // false
- if(1 == false) // false
- if(1 == true)  // true
- if(2 == false) // false
- if(2 == true)  // false
- cout << false  // 0
- cout << true   // 1


Streams:
- forgetting out.close();
- add content to an ifstream with putback(), not put()
- cout << in.get();
  instead of 
  cout << (char) in.get();
- function parameter of some stream type not called by reference
  e.g. void print(int amount, ofstream file);
  instead of void print(int amount, ofstream& file);
- forgetting that get() deletes the character from the file, or that seek() does not move on to the next character, or that putback(..) requires a char argument
- peek() and get() with no arg are of type int, need to add "(char) peek()" etc to get char
- getline() is so useful, use it when input is organised in lines, eg with for get_symbol_for_station_or_line()
- using strcmp() is difficult because it wants const char*, and you might be handling string, or char* or wtv. as a test, try to use strcmp() in get_symbole_foretc.
  Victoria does it really well, check her code for mistakes

Cstrings & Arrays:
- not making efficient use of <cstring> library, which includes get_line(..), strcmp(..), strcpy(..)
- use string getting paradigm with const int maximum_length: search "getline" in wjk lecture 6
- "getline(a, max_length)" instead of "cin.getline(a, max_length)"
- write a program that deletes every repeated character from a string, but write pseudo code on paper first! this one's a killer
- strtok function v useful
- cannnot assign an array to another. strcpy() is available for char arrays. but also quite cool is memcpoy(), useful for all inc int arrays, but you need to specify
  size to copy, which can be a pain.
- automatic deprecation of char* to const char* when assigning "blabla" directly - see Git/Scratch/string.cpp for fiddles
- we can assign "blabla" to char* or to const char*, but we cannot assign a string variable to them!! yeah that's weird
- we can assign NULL or \0 to char* or const char*
- NULL and \0 have the same binary code as zero, and since zero is an 'important' value for an int array, it doesn't serve as a sentinal in int arrays
- if char* a has a sentinel character, we can print it out simply with cout << a, whereas with an int* b, it will print out &b[0]
- to initialise an array with multiple values, the array size has to be given, eg
  int array[6] = {0,1,2,3,4,5}
  //and not int array = {0,1,2,3,4,5}
- this works!
  char ch = 'a';
  ch++;
  cout << ch << endl; //O
- multitap mock test, how to modify contents of static cstring in a function and not lose it (ie how to call by reference)


Strings:
- str.compare()
- getline()
- str.size(), not str.size nor str.length nor str.length()
- read integers from a string: istream_iterator
  ++begin not begin++
- can we assign        | char*        | const char* |        string
  ----------------------------------------------
  char*                |  yes        |     -              |   -
  const char*        |  yes        |    yes      |   -
  string        |  yes        |    yes      |  yes
- actually, there is a roundabout way of assigning a string to char*: 
  char* a;
  string b = "foo";
  a = &b[0];           //works because entries of string are stored contiguously 
- for aboves, see Git/Scratch/string.cpp for fiddles
- concatenating any two elements of {char, const char, char*, const char*, string, const string}
  using strcat(), string::append, +=, +, ...
  check out Scratch/charithmetic.cpp
  real pain


Pointers:
- create/increment a dynamic array
  int *p;
  //p[0] = new int;          false! you can only new a pointer, and p[0] is an int
  p = new int;
  *p = 4;               //p[0] == 4
  p[7] = 12;
  //cout p[7];                  segfault! size of p needs to be >7 for this to be legit
- using nothrow to avoid segfault:
  int *p = new (nothrow) int[10];                 //sets p to NULL if no more dynmemory
  if (p = NULL) {
        cout << "segfault at line 112" << endl;
        exit(1);
  }
- forgetting to delete contents when you're done
- segmentation fault: when trying to dereference a pointer with no value; must know below off by heart
  http://stackoverflow.com/questions/2346806/what-is-segmentation-fault
  1) dereference a null pointer:
  int *p = NULL;
  *p = 1;                        //C++ syntax makes this look dreadfully ok. but p has no value, so there's no int variable to assign 1 to

  2) write to a portion of memory that is read-only:
  char *p = "Foo";        //somehow, compiler accepts this, and marks the constant string as read-only
  *p = 'Caca';                //and somehow the pointer's value cannot therefore be changed either

  3) dereference a dangling pointer:
  char *p;
  {
        char c;
        p = &c;                //p is not dangling
  }
  cout << *p;                //now, p is dangling

- consider:
{
  const int nam_length = get_length(name);
  ifstream input[nam_length];                        //won't work if get_length is not of return type const int
}
{
  ifstream *input;
  for(int i=0; i<get_length(name); i++)
  {
    input[i] = new ifstream;
    input[i].open("file.txt");                  //segfault occurs, probs because of dereference, but is this really one?
  }   
}
{
  int name_length = get_length(name);
  ifstream = new ifstream[name_length];        
  for(int i=0; i<get_length(name); i++)
  {
    input[i].open("file.txt");                        //this works!
  }
}
- the error containing "free() invalid next size (normal/fast)" is a buffer overflow. you haven't been deleting dynamic variables!
- "terminate called after throwing an instance of 'std::bad_alloc' "
  this happens when 'new' cannot allocate more memory. happens when new is passed an expression that evaluates to a very large number
- const int *p vs int const *p, and when to use const in the parameter list


Linked Lists:
- forgetting semicolon at end of struct{} block
- Node object has a data entry, referred to as object.entry; the next entry is object.next->entry
- *(nodep).word instead of (*nodep).word
- while(list->data != NULL) instead of while(list != NULL), which results in semgentation fault
- q3 ex7, notice how important it is to make the last node NULL - otherw segmentation faultpec
  so when adding/deleting/modifying a node at the end, you need to do delete node and then make it point to NULL (strangely)
  so when adding/deleting/modifying a inked list, need to distinguish three cases: head/tail/other is affected. this is the ultimate paradigm. adopt it.
- no need to call Node_ptr by ref unless function modifies the linked list.
  however, if you are modifying, keep a "beginning" pointer to send list back to it once you're done moving list around!

Data structures:
- be comfortable with maps. see chess spec annotations
  

Object oriented programming:
- in enigma, code to read integers from ifstream
- syntax for declaring subclass, for inherited constructor, for object calling a member function from its superclass (really not obvious)
- crazy mistake: if you have class Parent with constructor Parent(), and you want to instantiate, don't write 
  Parent someone(); //!!!! you will get the error code that someone is of non-class type 'Parent()'
- create an array of objects with a constructor that takes arguments: not possible in c++! use a vector instead. cf Scratch/objarray
- to call multiple base class methods in a derived class method:
  void newMethod() : baseMethod(), otherBaseMethod() {
  }
- copy constructor, make sure you know its syntax and when to use it. should copyee parameter be pointer, object, reference? for example,
  Class(Class const &) {}
- in enigma, you needed your error function to be called from member methods across various classes. the solution was to create a static function
  in the Engima class. keep this trick in mind. remember static functions cannot call non static fields.
- function(int a, int b) const { }
  ONLY used with member functions. 'const' means the object on whom this method is called is not modified in any way by the method.
- pure virtual: if you define a class merely for inheritance purposes which will never be instanciated, signal this by making it abstract: it suffices
  to make any of its fields pure virtual (eg "virtual bool load(argv[]) = 0;"). compiler understands this as "I'm going to bring this function to life in 
  each of my derived classes". if you don't use exactly same return type and parameter list, you'll create overloads, i.e. different functions, so 
  compiler will make your derived classes inherit the pure virtual function, making your derived classes abstract as well.
  notice that the virtual modifier doesn't create an overload i.e. a new function.
- cannot manipulate objects of abstract class, but can manipulate pointers of abstract class
- "undefined reference to `vtable for Class'
   collect2: error: ld returned 1 exit status"
  this error will occur on the line at which your constructor is defined. happens in subclass of abstract class when pure virtual function in subclass 
  hasn't been brought to life in the subclass.
- when you get very long error containing
  "passing 'const .... as 'this' argument of ...[shitloadsofgibberish]...; _Alloc...[gibberish]... discards qualifiers [-fpermissive]"
- operator overloading: learn to do it, be comfortable. overloaded operators are not class fields, they need to be defined as friend functions. also, they 
  are not inherited.
- using virtual functions and dynamic binding. use it to optimise code.
- "expected constructor, destructor, or type conversion before '(' token"
  when you get this on a line at which you are defining a constructor, means you are not defining your constructo properly. maybe forgetting to specify 
  a parameter type?
- virtual functions: http://stackoverflow.com/questions/8824359/why-use-virtual-functions
- "warning: '<class_member>' will be initialized after [-Wreorder]
   warning: '<class_member> [-Wreorder]
   warning: when initialized here [-Wreorder]"
  this is one single warning. occurs when order in which you assign values to fields is different to order in which fields were declared in class. can be 
  important when a field uses another.
- protected modifier, don't forget it you idiot
- constructors cannot be virtual, but destructors can, and MUST, if you want to delete abstract pointer
- copy constructor for abstract class: http://en.wikibooks.org/wiki/More_C%2B%2B_Idioms/Virtual_Constructor
  virtual constructors don't exist, neither do virtual copy constructors. this is a bit of a hack, but a cool hack. 
  it's a normal method that returns "new Class(*this)". 
- what is the difference between foo(Class const &) and foo(const Class&) ? maybe former means that what parameter refers to cannot be changed. that's cool.
- don't automatically make your methods public. think of cheating or hacking and how you can prevent it
- fields are to have different values across objects. so howMove in chess was a shit field.


What to write on extra blank paper:
- print out a string
- copy a file's contents to another
- ASCII map values
- bash increase history for long compile error results
- concatenating two strings, or a string and a char, or several chars, or cstring and a char, etc...
Status API Training Shop Blog About © 2013 GitHub, Inc. Terms Privacy Security Contact 
