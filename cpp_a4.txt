M-x column-number-mode
M-x customize-face
C-x m <function>                  REMEMBER!
C-_                               wide undo
C-g C-_                           wide redo

cstring:
  to clear: charray[0] = '\0';
  const char* always has a sentinel character

strstr:                          REMEMBER!
  #include no need
    char* strstr(char* str, const char* target);
    const char* strstr(const char* str, const char* target);
    //returns *p to 1st occurrence in str1 of str2, else null *p

strlen:                          REMEMBER!
  #include<cstring>
    int strlen(const char*);

getline:
  #include<istream> or #include<fstream>
    istream.getline(char*, int size)
    istream.getline(char*, int size, char delim)

strtok:
  #include<cstring>
    char* strtok(char*, const char* delims);
  example:
    for(char* p=strtok(str,".,"); p!=NULL; p=strtok(NULL,".,"))
    //look out for that null at the end

strcpy:
  #include<cstring>
    char* strcpy(char* dest, const char* source);

strcat:
  #include<cstring>
    char* strcat(char* dest, const char* source);

strcmp:
  #include<cstring>
    int strcmp(const char*, const char*);
    //returns 0 if identical
    //returns >0 if 1st char to not match has 
    //greater value in charray1 vs charray2
    //and vice versa

strncmp:
  #include<cstring>
    int strncmp(const char*, const char*, int n);
    //strcmp() on first n characters of both strings
    //C doesn't support overloading

isdigit:
  #include<cctype>
    int isdigit(char);
    //returns 0 if not digit
    //returns a value if digit

atoi:
  #include<cstdlib>
    int atoi(const char* str);
    //string to integer
    //discards whitespace until digit met
    //atoi("  -23")   = -23
    //atoi("  4  3")  = 4
    //atoi("  7  -3") = 7

itoa:
  not with the lab compilers
  integer to string
  if handling digits only, use char arithmetic with +-'0'
  if handling larger ints, create recursive /10 helper function
  
  +-'0'
    //one digit
    int digit = 6;
    char cdigit = digit + '0';
    
    //array of digits
    const int length = 5;
    int digits[length] = {0,1,2,3,4};
    char cdigits[length+1];
    for(int i=0; i<length; i++)
      cdigits[i] = digits[i] + '0';
    cdigits[length] = '\0';

  lexical_cast
    boost library not allowed

  see what McCormac proposes!

vector:
  #include<vector>
    typedef vector<Class> Vec;
    typedef vector<Class>::iterator VecIt;
  append_1_element
    vecobj.push_back(Class element);
  insert
    vecobj.insert();
  search
    vecobj.find(vecobj.begin(), vecobj.end(), Class element);
    //returns VecIt pointing to element found


carrays:
const char* is same as char const*
char* const is a constant pointer to a char
const char* const is a constant pointer to a const char


2D arrays, load map:
  char **allocate_2D_array(int rows, int columns) {
    char **m = new char *[rows];
    assert(m);
    for (int r=0; r<rows; r++) {
      m[r] = new char[columns];
      assert(m[r]);
    }
    return m;
  }

  void deallocate_2D_array(char **m, int rows) {
    for (int r=0; r<rows; r++)
      delete [] m[r];
    delete [] m;
  }

char **load_maze(const char *filename, int &height, int &width) {
  bool success = get_maze_dimensions(filename, height, width);
  if (!success)
    return NULL;
  char **m = allocate_2D_array(height, width);
  ifstream input(filename);
  char line[512];
  for (int r = 0; r<height; r++) {
    input.getline(line, 512);
    strcpy(m[r], line);
  }
  return m;
}


SILLY STUFF:
- read whole paper before beginning please!! there are sometimes
  much easier questions down the line
- ostreams and istreams as args must be called by ref 
- only way to return cstring is with dynamic arrays
- makefile syntax (don't forget anything)
- _.cpp doesn't need #include"_.h" unless a function in .cpp is
  called before having been defined
- 'using namespace std' must appear before #include"_.h" in any file!
- palindrome q1 took you 15 mins, because you're not commenting
  as you code where you might be writing a mistake
- braille print question humiliated you with hours of work


